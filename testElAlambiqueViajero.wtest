import elAlambiqueViajero.*
test "luke cuenta cuando va de viaje"{
    luke.viajar(paris)
    assert.equals(1, luke.cantidadViajes())
}

test "luke viaja a paris"{
    luke.viajar(paris)
    assert.equals("Llavero Torre Eiffel", luke.recuerdo())
}


test "luke viaja a bs as"{
    luke.viajar(buenosAires)
    assert.equals("Mate", luke.recuerdo())
}

test "luke viaja a bagdad con un recuerdo diferente"{
    bagdad.recuerdo("Armas Masivas")
    luke.viajar(bagdad)
    assert.equals("Armas Masivas", luke.recuerdo())
}

test "luke viaja a bagdad"{
    bagdad.recuerdo("Armas Masivas")
    luke.viajar(bagdad)
    assert.equals("Armas Masivas", luke.recuerdo())
}
test "luke viaja a las vegas cuando hace homenaje a bs as"{
    lasVegas.homenaje(buenosAires)
    luke.viajar(lasVegas)
    assert.equals("Mate", luke.recuerdo())
}
test "luke viaja a las vegas cuando hace homenaje a paris"{
    lasVegas.homenaje(paris)
    luke.viajar(lasVegas)
    assert.equals("Llavero Torre Eiffel", luke.recuerdo())
}


test "luke viaja a paris y le qeuda combustibles para seguir viajando"{
    luke.viajar(paris)
    assert.that(alambiqueVeloz.puedeFuncionar())
}
test "luke viaja 2 veces a paris y ya no le queda combustibles para seguir viajando"{
    luke.viajar(paris)
    luke.viajar(paris)
    assert.notThat(alambiqueVeloz.puedeFuncionar())
}
test "luke viaja 2 veces, quiere viajar a Paris y no puede"{
    luke.viajar(buenosAires)
    luke.viajar(buenosAires)
    luke.viajar(paris)
    assert.notEquals("Llavero Torre Eiffel",luke.recuerdo())
}

test "luke viaja a hurlingham en el convertible convertido en chatarra" {
  luke.vehiculo(convertible)
  convertible.convertir(chatarra)
  luke.viajar(hurlingham)
  assert.equals("sticker de la Unahur",luke.recuerdo())
  assert.equals(5,chatarra.ca√±ones())

  }

test "la moto no puede participar en la carrera porque no puede vijar a hurlingham" {
  carrera.inscribirAuto(moto)
  assert.equals([moto], carrera.rechazados())
}

test "el alambique veloz puede participar en la carrera porque puede vijar a hurlingham" {
  carrera.inscribirAuto(alambiqueVeloz)
  assert.equals([alambiqueVeloz], carrera.aceptados())
}

test "pero si despues la ciudad de la carrera cambia a bagdad, ambos quedan aceptados" {
  carrera.inscribirAuto(moto)
  carrera.inscribirAuto(alambiqueVeloz)
  carrera.cambiarCiudad(bagdad)
  assert.equals([moto , alambiqueVeloz], carrera.aceptados())
  assert.that(carrera.rechazados().isEmpty())
}

test "y si la carrera vuelve a ser en hurlingham, el resultado vuelve a ser el inicial" {
  carrera.inscribirAuto(moto)
  carrera.inscribirAuto(alambiqueVeloz)
  carrera.cambiarCiudad(bagdad)
  carrera.cambiarCiudad(hurlingham)
  assert.equals([moto], carrera.rechazados())
  assert.equals([alambiqueVeloz], carrera.aceptados())
}

test "la carrera es en bagdad, cuando los autos aceptados van alli sufren desgaste" {
    carrera.inscribirAuto(alambiqueVeloz)
    carrera.cambiarCiudad(bagdad)
    carrera.irALaCarrera()
    assert.equals(10, alambiqueVeloz.combustible())
}

test "la antigualla blindada perdio un gangster y ahora tiene 6 dentro" {
  antiguallaBlindada.bajarGangster("juan")
  assert.equals(6, antiguallaBlindada.gangsters().size())
}

test "la antigualla blindada sumo un gangster (llamado marcos) y ahora tiene 8 dentro" {
  antiguallaBlindada.subirGangster("marcos")
  assert.equals(8, antiguallaBlindada.gangsters().size())
}

test "la velocidad de la antigualla es de 41" {
  assert.equals(41, antiguallaBlindada.velocidad())
}

test "Si marcos sube a la antigualla su velocidad sube a 47" {
  antiguallaBlindada.subirGangster("marcos")
  assert.equals(47, antiguallaBlindada.velocidad())
}

test "el super convertible se convierte en la moto (que es la mas rapida de la lista)" {
  assert.equals(100, superConvertible.velocidad())
}